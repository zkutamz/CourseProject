// <auto-generated />
using System;
using LMS.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LMS.Repository.Migrations
{
    [DbContext(typeof(LMSApplicationContext))]
    [Migration("20220225070238_AddForeginKeyToUserSubscriber")]
    partial class AddForeginKeyToUserSubscriber
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LMS.Repository.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("QuizQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuizSubmissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuizQuestionId");

                    b.HasIndex("QuizSubmissionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("LMS.Repository.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DownVote")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FacebookLink")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Headline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("");

                    b.Property<string>("Intro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(4000)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LinkedInLink")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileLink")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("");

                    b.Property<int>("ProfileViewCount")
                        .HasColumnType("int");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterLink")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UpVote")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Verified")
                        .HasColumnType("datetime2");

                    b.Property<string>("YoutubeLink")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1995, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "1cd67dc8-f6be-4af0-84d6-ded8a58cd3e1",
                            DownVote = 0,
                            Email = "admin@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Ad",
                            IsDelete = false,
                            LastName = "Min",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN9TLIlmFYcdbIEgDuQNkgaEyZzOHqFChiSB3nHvigwyK/BMKPUbI+2XhOR0L+oq3w==",
                            PhoneNumberConfirmed = false,
                            ProfileViewCount = 0,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UpVote = 0,
                            UserName = "admin@mail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "408f148e-711f-41f9-842b-7129bda922e0",
                            DownVote = 0,
                            Email = "student@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Stu",
                            IsDelete = false,
                            LastName = "Dent",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@MAIL.COM",
                            NormalizedUserName = "STUDENT@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJSY0IKywGz5gum9E/DsInbrdfhb+xJSkaY73OF868cFFKtfbZ+RasYapW2oyjYKUQ==",
                            PhoneNumberConfirmed = false,
                            ProfileViewCount = 0,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UpVote = 0,
                            UserName = "student@mail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ee1916ba-2812-4217-8b5d-8729ef6c36e9",
                            DownVote = 0,
                            Email = "instructor@mail.com",
                            EmailConfirmed = true,
                            FirstName = "In",
                            IsDelete = false,
                            LastName = "Structor",
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR@MAIL.COM",
                            NormalizedUserName = "INSTRUCTOR@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELQwDAGLwOLuTmphTOqVxeX7gKFq/Jl80qHkoATr8WLLHv0IEsx3lJYXt7z9qgUkhg==",
                            PhoneNumberConfirmed = false,
                            ProfileViewCount = 0,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UpVote = 0,
                            UserName = "instructor@mail.com"
                        });
                });

            modelBuilder.Entity("LMS.Repository.Entities.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("MaximumAttachmentSizeLimit")
                        .HasColumnType("int");

                    b.Property<int>("MinimumPassNumber")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalNumber")
                        .HasColumnType("int");

                    b.Property<int>("TotalTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UploadAttachmentLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("LMS.Repository.Entities.AssignmentSubmissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<float>("PercentCompleted")
                        .HasColumnType("real");

                    b.Property<DateTime>("SubmitDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("UserId");

                    b.ToTable("AssignmentSubmissions");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("LessonId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("LMS.Repository.Entities.BillingAddress", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("AcademyName")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailPaypal")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("WithdrawalMethodId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("WithdrawalMethodId");

                    b.ToTable("BillingAddresses");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            WithdrawalMethodId = 1
                        },
                        new
                        {
                            UserId = 2,
                            WithdrawalMethodId = 1
                        },
                        new
                        {
                            UserId = 3,
                            WithdrawalMethodId = 1
                        });
                });

            modelBuilder.Entity("LMS.Repository.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 53, DateTimeKind.Local).AddTicks(4739),
                            Icon = "BsCode",
                            IsDelete = false,
                            Name = "Development",
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(1352)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2216),
                            Icon = "BsBarChart",
                            IsDelete = false,
                            Name = "Business",
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2225)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2228),
                            Icon = "AiOutlineAccountBook",
                            IsDelete = false,
                            Name = "Finance & Accounting",
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2230)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2234),
                            Icon = "HiOutlineDesktopComputer",
                            IsDelete = false,
                            Name = "IT & Software",
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2236)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2239),
                            Icon = "HiOutlineOfficeBuilding",
                            IsDelete = false,
                            Name = "Office Productivity",
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2242)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2245),
                            Icon = "AiOutlineBook",
                            IsDelete = false,
                            Name = "Personal Development",
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2247)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2250),
                            Icon = "RiRulerLine",
                            IsDelete = false,
                            Name = "Design",
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2252)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2256),
                            Icon = "AiOutlineBarChart",
                            IsDelete = false,
                            Name = "Marketing",
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2258)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2261),
                            Icon = "GiLifeInTheBalance",
                            IsDelete = false,
                            Name = "Lifestyle",
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2264)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2266),
                            Icon = "MdOutlinePhotoCamera",
                            IsDelete = false,
                            Name = "Photography",
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2269)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2272),
                            Icon = "IoFitnessOutline",
                            IsDelete = false,
                            Name = "Health & Fitness",
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2274)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2277),
                            Icon = "IoMusicalNotesOutline",
                            IsDelete = false,
                            Name = "Music",
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2279)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2283),
                            Icon = "HiOutlineAcademicCap",
                            IsDelete = false,
                            Name = "Teaching & Academics",
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 54, DateTimeKind.Local).AddTicks(2285)
                        });
                });

            modelBuilder.Entity("LMS.Repository.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CertificateCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CertificateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForCourse")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CertificateCategoryId");

                    b.HasIndex("CourseId")
                        .IsUnique()
                        .HasFilter("[CourseId] IS NOT NULL");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateCategoryId = 1,
                            CertificateName = "Wordpress",
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8254),
                            IsDelete = false,
                            IsForCourse = false,
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8291)
                        },
                        new
                        {
                            Id = 2,
                            CertificateCategoryId = 2,
                            CertificateName = "Accounting",
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8295),
                            IsDelete = false,
                            IsForCourse = false,
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8296)
                        },
                        new
                        {
                            Id = 3,
                            CertificateCategoryId = 2,
                            CertificateName = "Finance",
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8298),
                            IsDelete = false,
                            IsForCourse = false,
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8299)
                        },
                        new
                        {
                            Id = 4,
                            CertificateCategoryId = 3,
                            CertificateName = "2D Animation",
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8301),
                            IsDelete = false,
                            IsForCourse = false,
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8303)
                        },
                        new
                        {
                            Id = 5,
                            CertificateCategoryId = 3,
                            CertificateName = "Adobe Photoshop",
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8304),
                            IsDelete = false,
                            IsForCourse = false,
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8306)
                        },
                        new
                        {
                            Id = 6,
                            CertificateCategoryId = 4,
                            CertificateName = "SEO",
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8308),
                            IsDelete = false,
                            IsForCourse = false,
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8309)
                        },
                        new
                        {
                            Id = 7,
                            CertificateCategoryId = 4,
                            CertificateName = "Bussiness Stragy",
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8311),
                            IsDelete = false,
                            IsForCourse = false,
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8312)
                        },
                        new
                        {
                            Id = 8,
                            CertificateCategoryId = 5,
                            CertificateName = "IELTS",
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8314),
                            IsDelete = false,
                            IsForCourse = false,
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8315)
                        },
                        new
                        {
                            Id = 9,
                            CertificateCategoryId = 5,
                            CertificateName = "Humanities",
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8317),
                            IsDelete = false,
                            IsForCourse = false,
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8318)
                        },
                        new
                        {
                            Id = 10,
                            CertificateCategoryId = 5,
                            CertificateName = "Humanities2",
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8320),
                            IsDelete = false,
                            IsForCourse = false,
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 131, DateTimeKind.Local).AddTicks(8321)
                        });
                });

            modelBuilder.Entity("LMS.Repository.Entities.CertificateCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CertificateCatgoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CertificateCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateCatgoryName = "Development",
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 132, DateTimeKind.Local).AddTicks(7922),
                            IsDelete = false,
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 132, DateTimeKind.Local).AddTicks(7950)
                        },
                        new
                        {
                            Id = 2,
                            CertificateCatgoryName = "Finance & Accounting",
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 132, DateTimeKind.Local).AddTicks(7953),
                            IsDelete = false,
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 132, DateTimeKind.Local).AddTicks(7954)
                        },
                        new
                        {
                            Id = 3,
                            CertificateCatgoryName = "Design",
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 132, DateTimeKind.Local).AddTicks(7957),
                            IsDelete = false,
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 132, DateTimeKind.Local).AddTicks(7958)
                        },
                        new
                        {
                            Id = 4,
                            CertificateCatgoryName = "Maketing",
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 132, DateTimeKind.Local).AddTicks(7960),
                            IsDelete = false,
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 132, DateTimeKind.Local).AddTicks(7961)
                        },
                        new
                        {
                            Id = 5,
                            CertificateCatgoryName = "Teaching & Academics",
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 132, DateTimeKind.Local).AddTicks(7967),
                            IsDelete = false,
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 132, DateTimeKind.Local).AddTicks(7968)
                        });
                });

            modelBuilder.Entity("LMS.Repository.Entities.CertificateTemplate", b =>
                {
                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CertificateId", "TemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("CertificateTemplates");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBlock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("LMS.Repository.Entities.ChatUser", b =>
                {
                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatUser");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Announcement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AudioLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CloseCaption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmbeddedCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Feature")
                        .HasColumnType("bit");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("IntroOverviewUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RequireEnroll")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiredLogIn")
                        .HasColumnType("bit");

                    b.Property<string>("Requirement")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(220)");

                    b.Property<string>("ThumbNailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TotalDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<string>("WhatLearn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AudioLanguage = "English",
                            CategoryId = 2,
                            CloseCaption = "English",
                            CourseStatus = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Welcome to The Blender Encyclopedia, the most comprehensive training course available for Blender, a completely free and open source 3D production suite.Our aim with the course was to make an expanded version of the Blender Manual, that you can follow along or reference at any time in your 3D journey.Further than the tools alone, we've made sure this course contains not just the how, but the why. Throughout the course, we've crafted example demos, as well as step by step projects,that will take what you've learned and form it into a practical example. You can get all the Blender files used in the lectures, complete with models,textures and other resources.This includes starting files so you can join in!You can use these resource files in your own projects as well.Just open them up to see their license details, if any.We have created this course specifically for Udemy, and you will have unlimited support from us in the Q & A section of each lecture.See you in the course, and happy blending!",
                            Feature = false,
                            InstructorId = 3,
                            IsDelete = false,
                            Level = 1,
                            OriginalPrice = 49m,
                            Price = 49m,
                            PublishedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequireEnroll = false,
                            RequiredLogIn = false,
                            Requirement = "Blender 2.8 or Blender 2.9",
                            ShortDescription = "Welcome to The Blender Encyclopedia",
                            ThumbNailUrl = "blender.jpg",
                            Title = "The Blender 2.8 Encyclopedia Version 1",
                            TotalDuration = 165600,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ViewCount = 0,
                            WhatLearn = "Nothing"
                        },
                        new
                        {
                            Id = 2,
                            AudioLanguage = "English",
                            CategoryId = 2,
                            CloseCaption = "English",
                            CourseStatus = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Welcome to The Blender Encyclopedia, the most comprehensive training course available for Blender, a completely free and open source 3D production suite.Our aim with the course was to make an expanded version of the Blender Manual, that you can follow along or reference at any time in your 3D journey.Further than the tools alone, we've made sure this course contains not just the how, but the why. Throughout the course, we've crafted example demos, as well as step by step projects,that will take what you've learned and form it into a practical example. You can get all the Blender files used in the lectures, complete with models,textures and other resources.This includes starting files so you can join in!You can use these resource files in your own projects as well.Just open them up to see their license details, if any.We have created this course specifically for Udemy, and you will have unlimited support from us in the Q & A section of each lecture.See you in the course, and happy blending!",
                            Feature = false,
                            InstructorId = 3,
                            IsDelete = false,
                            Level = 1,
                            OriginalPrice = 49m,
                            Price = 49m,
                            PublishedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequireEnroll = false,
                            RequiredLogIn = false,
                            Requirement = "Blender 2.8 or Blender 2.9",
                            ShortDescription = "Welcome to The Blender Encyclopedia",
                            ThumbNailUrl = "blender.jpg",
                            Title = "The Blender 2.8 Encyclopedia V2",
                            TotalDuration = 165600,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ViewCount = 0,
                            WhatLearn = "Nothing"
                        });
                });

            modelBuilder.Entity("LMS.Repository.Entities.CourseComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("CourseComment");
                });

            modelBuilder.Entity("LMS.Repository.Entities.CourseDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseDiscounts");
                });

            modelBuilder.Entity("LMS.Repository.Entities.CoursePromotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponCode");

                    b.HasIndex("VendorId");

                    b.ToTable("CoursePromotions");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("Discussions");
                });

            modelBuilder.Entity("LMS.Repository.Entities.EnrollCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CertificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CertificationURL")
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("CompletedPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EnrollDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCertificate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("EnrollCourses");
                });

            modelBuilder.Entity("LMS.Repository.Entities.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HelpId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HelpId");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("LMS.Repository.Entities.FavoriteCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteCourses");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("SreenShot")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Help", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("UserContent")
                        .IsUnique();

                    b.ToTable("Helps");
                });

            modelBuilder.Entity("LMS.Repository.Entities.HelpArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HelpTopicId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HelpTopicId");

                    b.ToTable("HelpArticles");
                });

            modelBuilder.Entity("LMS.Repository.Entities.HelpTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("HelpId")
                        .HasColumnType("int");

                    b.Property<string>("IconURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HelpId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("HelpTopics");
                });

            modelBuilder.Entity("LMS.Repository.Entities.LearningPeriods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LearningDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Period")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LearningPeriods");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmbeddedCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TotalTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("LMS.Repository.Entities.LessonCompletion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("LessonCompletion");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnrollCourseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseId");

                    b.HasIndex("LessonId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("LMS.Repository.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("ActivityOnMyComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("RecommendedCourses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("RepliesToMyComments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("Subscriptions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ActivityOnMyComment = false,
                            RecommendedCourses = false,
                            RepliesToMyComments = false,
                            Subscriptions = false
                        },
                        new
                        {
                            UserId = 2,
                            ActivityOnMyComment = false,
                            RecommendedCourses = false,
                            RepliesToMyComments = false,
                            Subscriptions = false
                        },
                        new
                        {
                            UserId = 3,
                            ActivityOnMyComment = false,
                            RecommendedCourses = false,
                            RepliesToMyComments = false,
                            Subscriptions = false
                        });
                });

            modelBuilder.Entity("LMS.Repository.Entities.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("LMS.Repository.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("OrderHeaderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("LMS.Repository.Entities.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CouponCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("money");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CouponCode");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SessionId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("LMS.Repository.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("LMS.Repository.Entities.PrivacySetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowCoursesYouAreTakingOnYourProfilePage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("ShowYourProfileOnSearchEngines")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("UserId");

                    b.ToTable("PrivacySettings");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ShowCoursesYouAreTakingOnYourProfilePage = false,
                            ShowYourProfileOnSearchEngines = false
                        },
                        new
                        {
                            UserId = 2,
                            ShowCoursesYouAreTakingOnYourProfilePage = false,
                            ShowYourProfileOnSearchEngines = false
                        },
                        new
                        {
                            UserId = 3,
                            ShowCoursesYouAreTakingOnYourProfilePage = false,
                            ShowYourProfileOnSearchEngines = false
                        });
                });

            modelBuilder.Entity("LMS.Repository.Entities.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsExposedQuestion")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TotalTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("LMS.Repository.Entities.QuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("AudioURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("ExplanationImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OptionA")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OptionB")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OptionC")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OptionD")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("QuizQuestionType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("LMS.Repository.Entities.QuizSection", b =>
                {
                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("SectionId");

                    b.HasIndex("QuizId")
                        .IsUnique();

                    b.ToTable("QuizSections");
                });

            modelBuilder.Entity("LMS.Repository.Entities.QuizSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorectAnswers")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPassed")
                        .HasColumnType("bit");

                    b.Property<int?>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalQuestion")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WrongAnswers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSubmissions");
                });

            modelBuilder.Entity("LMS.Repository.Entities.QuizzCertificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<int>("QuizzId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CertificateId", "QuizzId");

                    b.HasIndex("CertificateId")
                        .IsUnique();

                    b.HasIndex("QuizzId")
                        .IsUnique();

                    b.ToTable("QuizzCertificates");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Reaction", b =>
                {
                    b.Property<int>("DiscussionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("Type")
                        .HasColumnType("bit");

                    b.HasKey("DiscussionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnrollCourseId")
                        .HasColumnType("int");

                    b.Property<int>("HelpfulnessRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EnrollCourseId")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<int>("TotalTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("LMS.Repository.Entities.SectionCompletion", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CompleteDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("UserId", "SectionId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionCompletions");
                });

            modelBuilder.Entity("LMS.Repository.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 2, 25, 14, 2, 37, 162, DateTimeKind.Local).AddTicks(2520));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Specializations", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTemplateForCourse")
                        .HasColumnType("bit");

                    b.Property<string>("TemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Templates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 173, DateTimeKind.Local).AddTicks(9593),
                            IsDelete = false,
                            IsTemplateForCourse = false,
                            TemplateName = "Template 1",
                            TemplateUrl = "\\Certificates\\CertificateTemplates\\templates\\ec022e5c-3c40-404b-90d8-9837f348ac5f.html",
                            UpdatedAt = new DateTime(2022, 2, 25, 14, 2, 37, 173, DateTimeKind.Local).AddTicks(9631)
                        });
                });

            modelBuilder.Entity("LMS.Repository.Entities.UserCertificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageCertificateUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CertificateId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCertificates");
                });

            modelBuilder.Entity("LMS.Repository.Entities.UserLoginToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserLoginTokens");
                });

            modelBuilder.Entity("LMS.Repository.Entities.UserSubcriber", b =>
                {
                    b.Property<int>("SubcriberId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SubcriberId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubcribers");
                });

            modelBuilder.Entity("LMS.Repository.Entities.UserVoter", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VoterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUpvote")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "VoterId");

                    b.ToTable("UserVoters");
                });

            modelBuilder.Entity("LMS.Repository.Entities.UserVotesReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHelpful")
                        .HasColumnType("bit");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId", "ReviewId")
                        .IsUnique();

                    b.ToTable("UserVotesReviews");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("LMS.Repository.Entities.WithdrawalMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("WithdrawalMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Paypal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Payoneer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Swift"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "7C1C661E-39EF-4BBE-BCFB-F0332769F9B2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "F9198767-CFDF-48A4-AFF1-229DFAD490DE",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "10B8F556-CD23-450E-A730-04732C046E9F",
                            Name = "Instructor",
                            NormalizedName = "INSTRUCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Answer", b =>
                {
                    b.HasOne("LMS.Repository.Entities.QuizQuestion", "QuizQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.QuizSubmission", "QuizSubmission")
                        .WithMany("Answers")
                        .HasForeignKey("QuizSubmissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.Assignment", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Section", "Section")
                        .WithMany("Assignments")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.AssignmentSubmissions", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Assignment", "Assignment")
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("AssignmentId");

                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Attachment", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Assignment", "Assignment")
                        .WithMany("Attachments")
                        .HasForeignKey("AssignmentId");

                    b.HasOne("LMS.Repository.Entities.Lesson", "Lesson")
                        .WithMany("Attachments")
                        .HasForeignKey("LessonId");
                });

            modelBuilder.Entity("LMS.Repository.Entities.BillingAddress", b =>
                {
                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithOne("BillingAddress")
                        .HasForeignKey("LMS.Repository.Entities.BillingAddress", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.WithdrawalMethod", "WithdrawalMethod")
                        .WithMany("BillingAddresses")
                        .HasForeignKey("WithdrawalMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.Category", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Certificate", b =>
                {
                    b.HasOne("LMS.Repository.Entities.CertificateCategory", "CertificateCategory")
                        .WithMany("Certificate")
                        .HasForeignKey("CertificateCategoryId");

                    b.HasOne("LMS.Repository.Entities.Course", "Course")
                        .WithOne("Certificate")
                        .HasForeignKey("LMS.Repository.Entities.Certificate", "CourseId");
                });

            modelBuilder.Entity("LMS.Repository.Entities.CertificateTemplate", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Certificate", "Certificate")
                        .WithMany("CertificateTemplates")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.Template", "Template")
                        .WithMany("CertificateTemplates")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.ChatUser", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Chat", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithMany("ChatUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.Course", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.AppUser", "AppUser")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.CourseComment", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Course", "Course")
                        .WithMany("CourseComments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.CourseComment", "ParentComment")
                        .WithMany("ChildCourseComments")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithOne("CourseComment")
                        .HasForeignKey("LMS.Repository.Entities.CourseComment", "UserId");
                });

            modelBuilder.Entity("LMS.Repository.Entities.CourseDiscount", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Course", "Course")
                        .WithMany("CourseDiscounts")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("LMS.Repository.Entities.CoursePromotion", b =>
                {
                    b.HasOne("LMS.Repository.Entities.AppUser", "Vendor")
                        .WithMany("CoursePromotions")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.Discussion", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Discussion", "ParentDiscussions")
                        .WithMany("ChildDiscussions")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithMany("Discussions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.EnrollCourse", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Course", "Course")
                        .WithMany("EnrollCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.AppUser", "AppUser")
                        .WithMany("EnrollCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.FAQ", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Help", "Help")
                        .WithMany("FAQs")
                        .HasForeignKey("HelpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.FavoriteCourse", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Course", "Course")
                        .WithMany("FavoriteCourses")
                        .HasForeignKey("CourseId");

                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithMany("FavoriteCourses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("LMS.Repository.Entities.Feedback", b =>
                {
                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithMany("Feedacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.HelpArticle", b =>
                {
                    b.HasOne("LMS.Repository.Entities.HelpTopic", "HelpTopic")
                        .WithMany("HelpArticles")
                        .HasForeignKey("HelpTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.HelpTopic", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Help", "Help")
                        .WithMany("HelpTopics")
                        .HasForeignKey("HelpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.LearningPeriods", b =>
                {
                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithMany("LearningPeriods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.Lesson", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Section", "Section")
                        .WithMany("Lessons")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.LessonCompletion", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Lesson", "Lession")
                        .WithMany("LessonCompletions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithMany("LessonCompletions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.Message", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Chat", "Chats")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.Notes", b =>
                {
                    b.HasOne("LMS.Repository.Entities.EnrollCourse", "EnrollCourse")
                        .WithMany("Notes")
                        .HasForeignKey("EnrollCourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.Lesson", "Lesson")
                        .WithMany("Notes")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.NotificationSetting", b =>
                {
                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithOne("NotificationSetting")
                        .HasForeignKey("LMS.Repository.Entities.NotificationSetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.Notifications", b =>
                {
                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.OrderDetail", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Course", "Course")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.OrderHeader", "OrderHeader")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.OrderHeader", b =>
                {
                    b.HasOne("LMS.Repository.Entities.CoursePromotion", "CoursePromotion")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("CouponCode");

                    b.HasOne("LMS.Repository.Entities.PaymentMethod", "PaymentMethods")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.PrivacySetting", b =>
                {
                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithOne("PrivacySetting")
                        .HasForeignKey("LMS.Repository.Entities.PrivacySetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.QuizQuestion", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId");
                });

            modelBuilder.Entity("LMS.Repository.Entities.QuizSection", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Quiz", "Quiz")
                        .WithOne("QuizSection")
                        .HasForeignKey("LMS.Repository.Entities.QuizSection", "QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.Section", "Section")
                        .WithMany("QuizSections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.QuizSubmission", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Quiz", "Quiz")
                        .WithMany("QuizSubmissions")
                        .HasForeignKey("QuizId");

                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("LMS.Repository.Entities.QuizzCertificate", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Certificate", "Certificate")
                        .WithOne("QuizCertificate")
                        .HasForeignKey("LMS.Repository.Entities.QuizzCertificate", "CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.Quiz", "Quiz")
                        .WithOne("QuizCertificate")
                        .HasForeignKey("LMS.Repository.Entities.QuizzCertificate", "QuizzId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.Reaction", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Discussion", "Discussion")
                        .WithMany("Reactions")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.Review", b =>
                {
                    b.HasOne("LMS.Repository.Entities.EnrollCourse", "EnrollCourse")
                        .WithOne("Review")
                        .HasForeignKey("LMS.Repository.Entities.Review", "EnrollCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.Section", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.SectionCompletion", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Section", "Section")
                        .WithMany("SectionCompletions")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithMany("SectionCompletions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.ShoppingCart", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Course", "Course")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.AppUser", "AppUser")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.Specializations", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Category", "Category")
                        .WithMany("Specializations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithMany("Specializations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.UserCertificate", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Certificate", "Certificate")
                        .WithMany("UserCertificates")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithMany("UserCertificates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.UserLoginToken", b =>
                {
                    b.HasOne("LMS.Repository.Entities.AppUser", "AppUser")
                        .WithMany("UserLoginTokens")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.UserSubcriber", b =>
                {
                    b.HasOne("LMS.Repository.Entities.AppUser", "Subscriber")
                        .WithMany("InstructorSubscribeds")
                        .HasForeignKey("SubcriberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithMany("UserSubscribeds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.UserVoter", b =>
                {
                    b.HasOne("LMS.Repository.Entities.AppUser", "AppUser")
                        .WithMany("UserVoters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.UserVotesReview", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Review", "Review")
                        .WithMany("UserVotesReviews")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithMany("UserVotesReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Repository.Entities.Visitor", b =>
                {
                    b.HasOne("LMS.Repository.Entities.Course", "Course")
                        .WithMany("Visitors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.AppUser", "User")
                        .WithMany("Visitors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("LMS.Repository.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("LMS.Repository.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Repository.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("LMS.Repository.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
